#!/usr/bin/env bash

{{ ansible_managed | comment }}

# Source helper functions
source {{ backup_restic_path }}/scripts/utils.sh

cri_alerting_mail()
{
    # Defaults
    local body="{{ backup_restic_alerting_mail_default_body }}"
    local dest=""
    local from="{{ backup_restic_alerting_mail_from }}"
    local subject="{{ backup_restic_alerting_mail_default_subject }}"

    # Options parsing
    ## Reset OPTIND
    OPTIND=1
    while getopts b:d:f:s: mail_option; do
        case "${mail_option}" in
            b) body="${OPTARG}";;
            d) dest="${OPTARG}";;
            f) from="${OPTARG}";;
            s) subject="${OPTARG}";;
            *) echoErr "Unrecognized option"; exit 1;;
        esac
    done

    check_vars dest

    echoInfo "Sending alerting mail.."

    {% if is_prune_host | d(false) %}
    {% if backup_restic_prune_alerting_mail_command == "mail" -%}
    # shellcheck disable=SC2086
    mail -aFrom:"$from" -s "${subject}" ${dest} <<< "${body}"
    {# Default to sendmail #}
    {% else -%}
    # shellcheck disable=SC2086
    cat <<EOF | {{ backup_restic_prune_alerting_sendmail_path }} -t
To: ${dest}
From: ${from}
Subject: ${subject}

${body}
EOF
    {% endif %}
    {% else %}
    {% if backup_restic_alerting_mail_command == "mail" -%}
    # shellcheck disable=SC2086
    mail -aFrom:"$from" -s "${subject}" ${dest} <<< "${body}"
    {# Default to sendmail #}
    {% else -%}
    # shellcheck disable=SC2086
    cat <<EOF | {{ backup_restic_alerting_sendmail_path }} -t
To: ${dest}
From: ${from}
Subject: ${subject}

${body}
EOF
    {% endif -%}
    {% endif -%}

    local mail_rc="$?"

    if [ "${mail_rc}" -ne 0 ]; then
        echoErr "Mail alerting failed with:"
        echoErr "rc: ${mail_rc}"
    fi
}

cri_alerting_slack()
{
    # Defaults
    local body="{{ backup_restic_alerting_slack_default_body }}"
    local title="{{ backup_restic_alerting_slack_default_title }}"

    local attachment_color_fail="{{ backup_restic_alerting_slack_color_fail }}"
    local attachment_color_success="{{ backup_restic_alerting_slack_color_sucess }}"
    local title_emote_fail="{{ backup_restic_alerting_slack_emoji_fail }}"
    local title_emote_success="{{ backup_restic_alerting_slack_emoji_sucess }}"

    # Error state by default, user *must* give the state to the function
    local operation_rc="1"
    local attachment_color="${attachment_color_fail}"

    # shellcheck disable=SC2016
    local payload_template='{
                                "channel": "%s",
                                "link_names": "true",
                                "text": "%s",
                                "blocks":[
                                    {
                                        "type": "section",
                                        "text": {
                                                "type": "mrkdwn",
                                                "text": "%s"
                                        }
                                    }
                                ],
                                "attachments": [
                                    {
                                        "color": "%s",
                                        "blocks": [
                                            {
                                                "type": "section",
                                                "text": {
                                                    "type": "mrkdwn",
                                                    "text": "```%s```"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }'

    # Options parsing
    ## Reset OPTIND
    OPTIND=1
    while getopts b:c:r:t:w: slack_option; do
        case "${slack_option}" in
            b) body="${OPTARG}";;
            c) channel="${OPTARG}";;
            r) operation_rc="${OPTARG}";;
            t) title="${OPTARG}";;
            w) webhook_url="${OPTARG}";;
            *) echoErr "Unrecognized option"; exit 1;;
        esac
    done

    check_vars channel webhook_url

    if [ "${operation_rc}" -eq "0" ]; then
        title="${title_emote_success} ${title}"
        attachment_color="${attachment_color_success}"
    else
        title="${title_emote_fail} ${title}"
    fi

    echoInfo "Sending Slack message to ${channel}..."
    local curl_out=""
    # shellcheck disable=SC2059
    curl_out="$(
    curl -X POST \
        -H 'Content-type: application/json' \
        --silent \
        --max-time {{ backup_restic_alerting_slack_curl_max_time }} \
        --retry {{ backup_restic_alerting_slack_curl_retry }} \
        --data \
        "$(printf   "${payload_template}" \
                    "${channel}" \
                    "${title}" \
                    "${title}" \
                    "${attachment_color}" \
                    "${body}" \
        )" \
        "${webhook_url}"
    )"
    local curl_rc="$?"

    if [[ "${curl_rc}" -ne 0 || "${curl_out}" != "ok" ]]; then
        echoErr "Slack alerting failed with:"
        echoErr "rc: ${curl_rc}"
        echoErr "output: ${curl_out}"
    fi
}

cri_alerting_mattermost()
{
    # Defaults
    local body="{{ backup_restic_alerting_mattermost_default_body }}"
    local title="{{ backup_restic_alerting_mattermost_default_title }}"

    local attachment_color_fail="{{ backup_restic_alerting_mattermost_color_fail }}"
    local attachment_color_success="{{ backup_restic_alerting_mattermost_color_sucess }}"
    local title_emote_fail="{{ backup_restic_alerting_mattermost_emoji_fail }}"
    local title_emote_success="{{ backup_restic_alerting_mattermost_emoji_sucess }}"

    # Error state by default, user *must* give the state to the function
    local operation_rc="1"
    local attachment_color="${attachment_color_fail}"

    # shellcheck disable=SC2016
    local payload_template='{
                                "channel": "%s",
                                "text": "%s",
                                "attachments": [
                                    {
                                        "fallback": "%s",
                                        "color": "%s",
                                        "title": "Restic logs",
                                        "text": "%s"
                                    }
                                ]
                            }'

    # Options parsing
    ## Reset OPTIND
    OPTIND=1
    while getopts b:c:r:t:w: mattermost_option; do
        case "${mattermost_option}" in
            b) body="${OPTARG}";;
            c) channel="${OPTARG}";;
            r) operation_rc="${OPTARG}";;
            t) title="${OPTARG}";;
            w) webhook_url="${OPTARG}";;
            *) echoErr "Unrecognized option"; exit 1;;
        esac
    done

    check_vars channel webhook_url

    if [ "${operation_rc}" -eq "0" ]; then
        title="${title_emote_success} ${title}"
        attachment_color="${attachment_color_success}"
    else
        title="${title_emote_fail} ${title}"
    fi

    echoInfo "Sending Mattermost message to ${channel}..."
    local curl_out=""
    # shellcheck disable=SC2059
    curl_out="$(
    curl -X POST \
        -H 'Content-type: application/json' \
        --silent \
        --max-time {{ backup_restic_alerting_mattermost_curl_max_time }} \
        --retry {{ backup_restic_alerting_mattermost_curl_retry }} \
        --data \
        "$(printf   "${payload_template}" \
                    "${channel}" \
                    "${title}" \
                    "${title}" \
                    "${attachment_color}" \
                    "${body}" \
        )" \
        "${webhook_url}"
    )"
    local curl_rc="$?"

    if [[ "${curl_rc}" -ne 0 || "${curl_out}" != "ok" ]]; then
        echoErr "Mattermost alerting failed with:"
        echoErr "rc: ${curl_rc}"
        echoErr "output: ${curl_out}"
    fi
}

cri_alerting_handler()
{
    local operation_end_epoch="0"
    local operation_log_file=""
    local operation_start_epoch="0"
    local operation_type="restic"

    # Error state by default, user *must* give the state to the function
    local operation_rc="1"
    local output_verb="failed"
    local operation_state="KO"

    # Options parsing
    ## Reset OPTIND
    OPTIND=1
    while getopts e:l:r:s:t: alert_option; do
        case "${alert_option}" in
            e) operation_end_epoch="${OPTARG}";;
            l) operation_log_file="${OPTARG}";;
            r) operation_rc="${OPTARG}";;
            s) operation_start_epoch="${OPTARG}";;
            t) operation_type="${OPTARG}";;
            *) echoErr "Unrecognized option"; exit 1;;
        esac
    done

    if [ "$operation_rc" -eq "0" ]; then
        if [[ "${CRI_DISABLE_ALERTING_ON_SUCCESS}" =~ ^(y|Y) ]]; then
            echoInfo "No alerting because your configuration disables alerting for successful restic operations."
            return
        fi
        output_verb="finished"
        operation_state="OK"
    fi

    local subject="${operation_type} ${output_verb} for ${BACKUP_NAME} on ${HOSTNAME}"
    local body="Operation failed with return code: ${operation_rc}. Please check the logs for more information."

    # Mail
    if [[ "${CRI_ALERTING_MAIL}" =~ ^(y|Y) ]]; then
        local mail_body="${body}"
        local mail_subject="[{{ backup_restic_alerting_mail_tag }}][${operation_state}] ${subject}"

        if [[ -n "${operation_log_file}" && -f "${operation_log_file}" ]]; then
            mail_body="$(cat "${operation_log_file}")"
        fi
        cri_alerting_mail -s "${mail_subject}" -b "${mail_body}" -d "${CRI_ALERTING_MAIL_DEST}"
    fi

    # Slack
    if [[ "${CRI_ALERTING_SLACK}" =~ ^(y|Y) ]]; then
        local slack_body="${body}"
        local slack_title="${subject}"
        if [[ -n "${operation_log_file}" && -f "${operation_log_file}" ]]; then
            slack_body="$(cat "${operation_log_file}")"
        fi
        cri_alerting_slack -t "${slack_title}" -r "${operation_rc}" -b "${slack_body}" \
        -c "${CRI_ALERTING_SLACK_CHANNEL}" -w "${CRI_ALERTING_SLACK_WEBHOOK_URL}"
    fi

    # Mattermost
    if [[ "${CRI_ALERTING_MATTERMOST}" =~ ^(y|Y) ]]; then
        local mattermost_body="${body}"
        local mattermost_title="${subject}"
        if [[ -n "${operation_log_file}" && -f "${operation_log_file}" ]]; then
            mattermost_body="$(cat "${operation_log_file}")"
        fi
        cri_alerting_mattermost -t "${mattermost_title}" -r "${operation_rc}" -b "${mattermost_body}" \
        -c "${CRI_ALERTING_MATTERMOST_CHANNEL}" -w "${CRI_ALERTING_MATTERMOST_WEBHOOK_URL}"
    fi
}

[[ "${0}" == "${BASH_SOURCE[0]}" ]] && cri_alerting_handler "${@}"
